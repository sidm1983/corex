# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- develop

pr:
- master
- develop

pool:
  vmImage: 'vs2017-win2016'

variables:
- group: overcore-sonarcloud
- name: Build.Master.Configuration
  value: 'Release'
- name: Build.NonMaster.Configuration
  value: 'Debug'

steps:
- task: GitVersion@4
  inputs:
    updateAssemblyInfo: true
    preferBundledVersion: true

- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: sonarcloud
    organization: '$(sonar.organization)'
    projectKey: '$(sonar.projectKey)'
    extraProperties: 'sonar.cs.vscoveragexml.reportsPaths=**/*.coveragexml'
  
  # start master build steps
- script: dotnet build -c $(Build.Master.Configuration)
  displayName: 'Build solution ($(Build.Master.Configuration))'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: VSTest@2
  displayName: 'Run unit tests ($(Build.Master.Configuration))'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    vsTestVersion: 'latest'
    runTestsInIsolation: true
    codeCoverageEnabled: true
    configuration: '$(Build.Master.Configuration)'
    publishRunAttachments: true
    #diagnosticsEnabled: true # Optional
    #collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: CopyFiles@2
  displayName: 'Stage build artifacts ($(Build.Master.Configuration))'
  inputs:
    contents: '**/bin/$(Build.Master.Configuration)/overcore.*.nupkg'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  # end master build steps

  # start non-master build steps
- script: dotnet build -c $(Build.NonMaster.Configuration)
  displayName: 'Build solution ($(Build.NonMaster.Configuration))'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: VSTest@2
  displayName: 'Run unit tests ($(Build.NonMaster.Configuration))'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*test*.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    vsTestVersion: 'latest'
    runTestsInIsolation: true
    codeCoverageEnabled: true
    configuration: '$(Build.NonMaster.Configuration)'
    publishRunAttachments: true
    #diagnosticsEnabled: true # Optional
    #collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: CopyFiles@2
  displayName: 'Stage build artifacts ($(Build.NonMaster.Configuration))'
  inputs:
    contents: '**/bin/$(Build.NonMaster.Configuration)/overcore.*.nupkg'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    flattenFolders: true
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  # end non-master build steps

# Common last task for both master & non-master builds
- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'

- task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'

- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: 'nuget-packages'